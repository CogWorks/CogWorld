(defvar *response* nil)

(defmethod rpm-window-key-event-handler ((win rpm-window) key)
  (setf *response* (string key)  ))
  
(defun do-experiment (window) 
   
  (setf *response* nil)
  (let ((lis (permute-list '("B" "C" "D" "F" "G" "H" 
                              "J" "K" "L" "M" "N" "P" 
                              "Q" "R" "S" "T" "V" "W" 
                              "X"  "Z")))
        (num-correct 0) (num-incorrect 0) (num-missed 0)
        (trial-list nil)
        )
    (if (null *actr-enabled-p*) (sleep 2))
    ;
    (dolist (letter lis)
      (add-text-to-exp-window :text letter :x 125 :y 150)
      (if *actr-enabled-p* (proc-display))
      (new-word-sound letter)
      (lw-speak letter)
      (setf *response* nil) 
      (allow-event-manager window)
      (sleep 2.0)
      (clear-exp-window) 
      (cond (*response* 
             (if trial-list
                 (if (or (and (string= "f" *response*) (string< letter (first trial-list)))
                          (and (string= "j" *response*) (string> letter (first trial-list))))
                        (incf num-correct)
                   (incf num-incorrect))))
            (trial-list
             (incf num-missed)))
      (push letter trial-list))
    (list 'correct num-correct 'incorrect num-incorrect 'missed num-missed)))

(defun run-model ()
  (reset)
  (let ((window (open-exp-window "N-back")))
    (install-device window)
    (proc-display)
    (mp:process-run-function "exp" '() #'do-experiment window)
    (run 10 :real-time t)))

(defun run-human
  (reset)
  (let ((window (window (open-exp-window "N-back"))))
    (do-experiment window)))

(clear-all)

(define-model nback

(sgp :seed (123456 0))
(sgp :v t :needs-mouse nil :show-focus t :trace-detail high)
  
(chunk-type hear-letter state)
(chunk-type array letter last)

(add-dm 
 (start isa chunk) (attend isa chunk) (find-event isa chunk)
 (respond isa chunk) (done isa chunk)
 (goal isa hear-letter state nil))


(p start-nback
  =goal> isa hear-letter state nil
==>
  +imaginal> isa array
  =goal> state start)

(P find-audio-event
   =goal>
      ISA         hear-letter
      state       start
  ?manual> state free
 ==>
   +aural-location>
      ISA         audio-event
      :attended   nil
      kind        word
   =goal>
      state       find-event
)

(P no-event
   =goal>
      ISA         hear-letter
      state       find-event
   ?aural-location>  state error
==>
   !eval! (print-audicon)
   =goal>
      state       start
)

(P attend-letter
   =goal>
      ISA         hear-letter
      state       find-event
   =aural-location>
      ISA         audio-event
   
   ?aural>
      state        free
   
==>
   +aural>
      ISA         sound
      event       =aural-location
   =goal>
      state       attend
)

(P encode-letter
   =goal>
      ISA         hear-letter
      state       attend
   =aural>
      ISA         sound
      content       =letter
   =imaginal> isa array
   
==>
   =goal>
      state       respond
  =imaginal>
      letter      =letter
)

(P first-trial
   =goal>
      ISA         hear-letter
      state       respond
   =imaginal>
      isa         array
      letter      =letter
      last        nil
==>
   =goal> state start
   =imaginal> 
    last =letter
    letter nil)


(P respond-less
   =goal>
      ISA         hear-letter
      state       respond
   =imaginal>
      isa         array
      letter      =letter
      last        =last
   !eval! (string< =letter =last)
   ?manual>   
      state       free
==>
  !output! (=last less than =letter)
   =goal>
      state       start
   =imaginal> 
    last =letter
    letter nil
   +manual>
      ISA         press-key
      key         "f"
)

(P respond-more
   =goal>
      ISA         hear-letter
      state       respond
   =imaginal>
      isa         array
      letter      =letter
      last        =last
   
   !eval! (string> =letter =last)
   ?manual>   
      state       free
==>
  !output! (=last greater than =letter)
   =goal>
      state       start
   =imaginal> 
    last =letter
    letter nil
   +manual>
      ISA         press-key
      key         "j"
)

(goal-focus goal)

(setf *actr-enabled-p* t)
)
