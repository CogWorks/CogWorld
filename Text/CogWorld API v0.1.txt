DEFINE-LOGGING-FOLDER

Signature:
(define-logging-folder pathname) ==> Nil

Defined in:
/Source/Modules/logging.lisp

This function defines the folder used to store data logging files. It takes a string designating a pathname or a physical pathname.

LOG-INFOSignature:(log-info data-list &key specify-time) ==> timeDefined in:/Source/Modules/logging.lispThis function writes a list of data values, specified by data-list, out to the data log file.  Each value in data-list is written out tab-separated, and a newline is written at the end of each call.  Each line in the data file will be pre-pended with the last 4 digits of the subject's RIN number (student ID number), as well as the current system time in milliseconds.The keyword specify-time optionally takes a value to be used as the current system time.  If specify-time is not provided or is Nil, then (get-internal-real-time) is used as the system time.log-info returns the value logged as the system time.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MONITOR-REGIONSignature:(monitor-region x1 y1 x2 y2 callback-function &key callback-type) ==> NilDefined in:/Source/Modules/event.lispThis function creates an event monitor which monitors a region of the screen specified by the rectangle (x1, y1) (x2, y2).  Event monitoring occurs only when a task is running, and currently three types of events are supported: mouse enter, mouse leave, and mouse click events within the boundaries of the specified region.  When one of these events occurs, the callback-function is passed a single argument specifying the event.callback-type can take either of two values, :string, or :keyword.  If :string, then the event passed to the callback-function will be one of "ENTER" "LEAVE" or "CLICK".  If callback-type is specified as :keyword, then the event passed to the callback-function will be one of :ENTER :LEAVE or :CLICK.  callback-type defaults to :string.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MOUSE-POSITIONSignature:(mouse-position) ==> (x y)Defined in:/Source/Modules/foreign.lispThis function returns the current position of the mouse cursor in global (screen) coordinates.See Also: SET-MOUSE-POSITION;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MW-SPEAKSignature:(mw-speak string &key voice model-string) ==> Nilmw-speak will synthesize a voice speaking the specified string.voice is an optional integer specifying which system voice to use, and can range from 1 to 22.  The default value is 19.model-string is an optional string which will be entered into ACT-R's audicon, if a model is currently running.  If model-string is not specified, then the value defaults to the entire string.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PLAY-SOUND-FILESignature:(play-sound-file path-name) ==> NilDefined in:/Source/Modules/foreign.lispThis function plays a sound specified by path-name.  Path-name must be a string giving the absolute location of the sound file to play.  The function returns immediately.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;REGISTER-TASKSignature:(register-task task-name &key run-function break-function configure-function) ==> task-objectDefined in:/Source/Modules/control.lispregister-task must be called at the top level in each MultiWorld task file in order to notify MultiWorld of the task's existence.  The function takes one mandatory argument, task-name, which should be a string specifying the name of the task.  It also accepts three keywords:configure-function should be a function of no arguments.  This function is called by MultiWorld right before the subject registration screen, and should perform any necessary task configuration code, such as selecting experimental conditions or task settings.  ** Note that once this function is called, the experiment will not resume until your task calls CONFIGURATION-DONE. Therefore you must call configuration-done once your task is completed with its configuration code. **run-function should be a function of no arguments which is called by MultiWorld when it is time to start the task.  This function should create and display the task windows, as well as start the actual task.break-function should be a function of no arguments.  This function is called by MultiWorld if it needs to interrupt your task, due to errors or experimenter intervention. The function you specify should perform any cleanup duties, such as destroying all task windows.register-task returns one argument, which is a custom task-object used to identify your task in the MultiWorld system.  You should store this object to a variable, as you will need to pass this object back to MultiWorld to notify it that your task has completed.See Also: CONFIGURATION-DONE, TASK-FINISHED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCREEN-POSITIONSignature:(screen-position pane) ==> X, YDefined in:/Source/Modules/parser.lispThis function takes one argument, which should be a CAPI pane currently displayed on the screen.  It returns two values, X and Y which are the position of the top-left corner of the pane specified in global (screen) coordinates.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SET-MOUSE-POSITIONSignature:(set-mouse-position x y) ==> NilDefined in:/Source/Modules/foreign.lispThis function warps the mouse cursor to the new position specified by (X, y).See Also: MOUSE-POSITION;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;TASK-FINISHEDSignature:(task-finished task-object) ==> NilDefined in:/Source/Modules/control.lispYour code should call this function when the task is completed.  The function takes one argument, which is the task-object as returned by REGISTER-TASK.  If all specified tasks have completed, then MultiWorld performs cleanup duties such as closing the log file and destroying the blue background window.See Also: REGISTER-TASK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UPDATE-SCREENSignature:(update-screen) ==> feature-countDefined in:/Source/Modules/parser.lispThis function should be called by the task whenever the visible properties of the task have changed.  The purpose is to notify MultiWorld that it needs to re-process the display into features for ACT-R's visicon.  The function returns one argument, which is the number of features parsed on the screen.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;